{"version":3,"sources":["features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoItem/TodoItem.tsx","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","utils/todosFiltering.ts","index.tsx"],"names":["actions","todo","type","payload","currentTodoReducer","state","action","value","filterReducer","query","status","todos","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoItem","dispatch","className","classNames","id","completed","title","onClick","TodoList","filteredTodos","length","map","TodoFilter","onSubmit","event","preventDefault","onChange","target","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","ok","Error","statusText","json","TodoModal","useState","user","setUser","useEffect","userId","handleCloseModal","href","email","name","App","isLoading","setIsLoading","isError","setIsError","getTodosFromServer","a","todosFromServer","useMemo","filteredByStatus","trim","toLowerCase","includes","getTodosFilteredByStatus","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d80b79f0.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../types/Status';\n\ntype SetStatusAction = {\n  type: 'filter/SET_STATUS';\n  payload: Status;\n};\n\ntype SetQueryAction = {\n  type: 'filter/SET_QUERY';\n  payload: string;\n};\n\nconst setStatus = (value: Status): SetStatusAction => ({\n  type: 'filter/SET_STATUS',\n  payload: value,\n});\n\nconst setQuery = (value: string): SetQueryAction => ({\n  type: 'filter/SET_QUERY',\n  payload: value,\n});\n\nexport type State = { query: string, status: Status };\ntype Action = SetStatusAction | SetQueryAction;\nexport const actions = { setStatus, setQuery };\n\nconst filterReducer = (\n  state: State = {\n    query: '',\n    status: 'all',\n  },\n  action: Action,\n) => {\n  switch (action.type) {\n    case 'filter/SET_QUERY':\n      return { ...state, query: action.payload };\n    case 'filter/SET_STATUS':\n      return { ...state, status: action.payload };\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype SetTodosAction = {\n  type: 'todos/SET';\n  payload: Todo[];\n};\n\nconst setTodos = (todos: Todo[]): SetTodosAction => ({\n  type: 'todos/SET',\n  payload: todos,\n});\n\ntype State = Todo[];\ntype Action = SetTodosAction;\n\nexport const actions = { setTodos };\n\nconst todosReducer = (\n  state: State = [],\n  action: Action,\n): Todo[] => {\n  switch (action.type) {\n    case 'todos/SET':\n      return [...action.payload];\n\n    default:\n      return state;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions } from '../../features/currentTodo';\n\ntype Props = {\n  todo: Todo,\n};\n\nexport const TodoItem: React.FC<Props> = ({ todo }) => {\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const dispatch = useAppDispatch();\n\n  const handleSelectTodo = () => {\n    dispatch(actions.setTodo(todo));\n  };\n\n  return (\n    <tr\n      key={todo.id}\n      data-cy=\"todo\"\n      className={classNames({\n        'has-background-info-light': currentTodo?.id === todo.id,\n      })}\n    >\n      <td className=\"is-vcentered\">{todo.id}</td>\n      <td className=\"is-vcentered\">\n        {todo.completed && (\n          <span className=\"icon\" data-cy=\"iconCompleted\">\n            <i className=\"fas fa-check\" />\n          </span>\n        )}\n      </td>\n      <td className=\"is-vcentered is-expanded\">\n        <p className={todo.completed\n          ? 'has-text-success'\n          : 'has-text-danger'}\n        >\n          {todo.title}\n        </p>\n      </td>\n      <td className=\"has-text-right is-vcentered\">\n        <button\n          data-cy=\"selectButton\"\n          className=\"button\"\n          type=\"button\"\n          onClick={handleSelectTodo}\n        >\n          <span className=\"icon\">\n            <i\n              className={classNames('far', {\n                'fa-eye': currentTodo?.id !== todo.id,\n                'fa-eye-slash': currentTodo?.id === todo.id,\n              })}\n            />\n          </span>\n        </button>\n      </td>\n    </tr>\n  );\n};\n","import React from 'react';\nimport { Todo } from '../../types/Todo';\nimport { TodoItem } from '../TodoItem';\n\ntype Props = {\n  filteredTodos: Todo[],\n};\n\nexport const TodoList: React.FC<Props> = ({ filteredTodos }) => {\n  return (\n    <>\n      {!filteredTodos.length ? (\n        <p className=\"notification is-warning\">\n          There are no todos matching current filter criteria\n        </p>\n      ) : (\n        <table className=\"table is-narrow is-fullwidth\">\n          <thead>\n            <tr>\n              <th>#</th>\n\n              <th>\n                <span className=\"icon\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              </th>\n\n              <th>Title</th>\n              <th> </th>\n            </tr>\n          </thead>\n\n          <tbody>\n            {filteredTodos.map(todo => (\n              <TodoItem todo={todo} key={todo.id} />\n            ))}\n          </tbody>\n        </table>\n      )}\n    </>\n  );\n};\n","import React from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions } from '../../features/filter';\nimport { Status } from '../../types/Status';\n\nexport const TodoFilter: React.FC = () => {\n  const { status, query } = useAppSelector(state => state.filter);\n  const dispatch = useAppDispatch();\n\n  const handleChangeQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\n    dispatch(actions.setQuery(event.target.value));\n  };\n\n  const handleChangeStatus = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    dispatch(actions.setStatus(event.target.value as Status));\n  };\n\n  const handleClearQuery = () => {\n    dispatch(actions.setQuery(''));\n  };\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={status}\n            onChange={handleChangeStatus}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={handleChangeQuery}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {!!query.length && (\n            <button\n              aria-label=\"button\"\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={handleClearQuery}\n            />\n          )}\n        </span>\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => {\n      if (!res.ok) {\n        throw new Error(`Error fetching data: ${res.statusText}`);\n      }\n\n      return res.json();\n    });\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { User } from '../../types/User';\nimport { getUser } from '../../api';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions } from '../../features/currentTodo';\n\nexport const TodoModal: React.FC = () => {\n  const [user, setUser] = useState<User | null>(null);\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    getUser(currentTodo?.userId || 0)\n      .then(setUser);\n  }, []);\n\n  const handleCloseModal = () => {\n    dispatch(actions.removeTodo());\n  };\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div\n        className=\"modal-background\"\n        onClick={handleCloseModal}\n        aria-hidden=\"true\"\n      />\n\n      {!user ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${currentTodo?.id}`}\n            </div>\n\n            <button\n              aria-label=\"button\"\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={handleCloseModal}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {currentTodo?.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {currentTodo?.completed ? (\n                <strong className=\"has-text-success\">Done</strong>\n              ) : (\n                <strong className=\"has-text-danger\">Planned</strong>\n              )}\n\n              {' by '}\n\n              <a href={`mailto:${user.email}`}>\n                {user.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useMemo, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { getTodos } from './api';\nimport { actions } from './features/todos';\nimport { getTodosFilteredByStatus } from './utils/todosFiltering';\n\nexport const App: React.FC = () => {\n  const [isLoading, setIsLoading] = useState(true);\n  const [isError, setIsError] = useState(false);\n\n  const todo = useAppSelector(state => state.currentTodo);\n  const todos = useAppSelector(state => state.todos);\n  const filter = useAppSelector(state => state.filter);\n  const dispatch = useAppDispatch();\n\n  const getTodosFromServer = async () => {\n    setIsLoading(true);\n\n    try {\n      const todosFromServer = await getTodos();\n\n      dispatch(actions.setTodos(todosFromServer));\n    } catch {\n      setIsError(true);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    getTodosFromServer();\n  }, []);\n\n  const filteredTodos = useMemo(() => {\n    return getTodosFilteredByStatus(todos, filter);\n  }, [todos, filter]);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {isLoading && <Loader />}\n              {isError && (<span>Oops! Something went wrong!</span>)}\n              {!isLoading && !isError && <TodoList filteredTodos={filteredTodos} />}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {todo && <TodoModal />}\n    </>\n  );\n};\n","import { Todo } from '../types/Todo';\nimport { State } from '../features/filter';\n\nexport const getTodosFilteredByStatus = (\n  todos: Todo[],\n  { status, query }: State,\n) => {\n  const filteredByStatus = todos.filter(({ completed }) => {\n    switch (status) {\n      case 'active':\n        return !completed;\n\n      case 'completed':\n        return completed;\n\n      default:\n        return true;\n    }\n  });\n\n  if (!query.trim().length) {\n    return filteredByStatus;\n  }\n\n  return filteredByStatus.filter(({ title }) => {\n    return title.toLowerCase().includes(query.toLowerCase());\n  });\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}